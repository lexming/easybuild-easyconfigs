Add support for GCC_HOST_BINUTILS_PREFIX environment variable to define
a specific prefix for tools in binutils
author: Alex Domingo (Vrije Universiteit Brussel)
diff -W 147 -Nru gpus.orig/crosstool/BUILD.tpl gpus/crosstool/BUILD.tpl
--- a/third_party/gpus/crosstool/BUILD.tpl	2021-10-25 10:18:06.613365000 +0200
+++ b/third_party/gpus/crosstool/BUILD.tpl	2021-10-21 00:42:48.115714000 +0200
@@ -61,6 +61,7 @@
     cpu = "local",
     builtin_include_directories = [%{cxx_builtin_include_directories}],
     extra_no_canonical_prefixes_flags = [%{extra_no_canonical_prefixes_flags}],
+    host_binutils_prefix = "%{host_binutils_prefix}",
     host_compiler_path = "%{host_compiler_path}",
     host_compiler_prefix = "%{host_compiler_prefix}",
     host_compiler_warnings = [%{host_compiler_warnings}],
@@ -91,6 +92,7 @@
     cpu = "darwin",
     builtin_include_directories = [%{cxx_builtin_include_directories}],
     extra_no_canonical_prefixes_flags = [%{extra_no_canonical_prefixes_flags}],
+    host_binutils_prefix = "%{host_binutils_prefix}",
     host_compiler_path = "%{host_compiler_path}",
     host_compiler_prefix = "%{host_compiler_prefix}",
     host_compiler_warnings = [%{host_compiler_warnings}],
diff -W 147 -Nru gpus.orig/crosstool/cc_toolchain_config.bzl.tpl gpus/crosstool/cc_toolchain_config.bzl.tpl
--- a/third_party/gpus/crosstool/cc_toolchain_config.bzl.tpl	2021-10-25 10:18:06.620265000 +0200
+++ b/third_party/gpus/crosstool/cc_toolchain_config.bzl.tpl	2021-10-21 00:34:11.625652176 +0200
@@ -229,18 +229,18 @@
     if cpu in ["local", "darwin"]:
         return [
             tool_path(name = "gcc", path = ctx.attr.host_compiler_path),
-            tool_path(name = "ar", path = ctx.attr.host_compiler_prefix + (
+            tool_path(name = "ar", path = ctx.attr.host_binutils_prefix + (
                 "/ar" if cpu == "local" else "/libtool"
             )),
-            tool_path(name = "compat-ld", path = ctx.attr.host_compiler_prefix + "/ld"),
+            tool_path(name = "compat-ld", path = ctx.attr.host_binutils_prefix + "/ld"),
             tool_path(name = "cpp", path = ctx.attr.host_compiler_prefix + "/cpp"),
-            tool_path(name = "dwp", path = ctx.attr.host_compiler_prefix + "/dwp"),
+            tool_path(name = "dwp", path = ctx.attr.host_binutils_prefix + "/dwp"),
             tool_path(name = "gcov", path = ctx.attr.host_compiler_prefix + "/gcov"),
-            tool_path(name = "ld", path = ctx.attr.host_compiler_prefix + "/ld"),
-            tool_path(name = "nm", path = ctx.attr.host_compiler_prefix + "/nm"),
-            tool_path(name = "objcopy", path = ctx.attr.host_compiler_prefix + "/objcopy"),
-            tool_path(name = "objdump", path = ctx.attr.host_compiler_prefix + "/objdump"),
-            tool_path(name = "strip", path = ctx.attr.host_compiler_prefix + "/strip"),
+            tool_path(name = "ld", path = ctx.attr.host_binutils_prefix + "/ld"),
+            tool_path(name = "nm", path = ctx.attr.host_binutils_prefix + "/nm"),
+            tool_path(name = "objcopy", path = ctx.attr.host_binutils_prefix + "/objcopy"),
+            tool_path(name = "objdump", path = ctx.attr.host_binutils_prefix + "/objdump"),
+            tool_path(name = "strip", path = ctx.attr.host_binutils_prefix + "/strip"),
         ]
     elif cpu == "x64_windows":
         return [
@@ -972,7 +972,7 @@
             cc_compiler_path = ctx.attr.host_compiler_path,
             archiver_path = ctx.attr.host_compiler_prefix + "/libtool",
             linker_path = ctx.attr.host_compiler_path,
-            strip_path = ctx.attr.host_compiler_prefix + "/strip",
+            strip_path = ctx.attr.host_binutils_prefix + "/strip",
         )
         artifact_name_patterns = []
     elif (cpu == "local"):
@@ -983,9 +983,9 @@
             assembly_path = ctx.attr.host_compiler_path,
             c_compiler_path = ctx.attr.host_compiler_path,
             cc_compiler_path = ctx.attr.host_compiler_path,
-            archiver_path = ctx.attr.host_compiler_prefix + "/ar",
+            archiver_path = ctx.attr.host_binutils_prefix + "/ar",
             linker_path = ctx.attr.host_compiler_path,
-            strip_path = ctx.attr.host_compiler_prefix + "/strip",
+            strip_path = ctx.attr.host_binutils_prefix + "/strip",
         )
         artifact_name_patterns = []
     elif (cpu == "x64_windows"):
@@ -1070,6 +1070,7 @@
         "compiler": attr.string(values = ["clang", "msvc", "unknown"], default = "unknown"),
         "builtin_include_directories": attr.string_list(),
         "extra_no_canonical_prefixes_flags": attr.string_list(),
+        "host_binutils_prefix": attr.string(),
         "host_compiler_path": attr.string(),
         "host_compiler_prefix": attr.string(),
         "host_compiler_warnings": attr.string_list(),
diff -W 147 -Nru gpus.orig/cuda_configure.bzl gpus/cuda_configure.bzl
--- a/third_party/gpus/cuda_configure.bzl	2021-10-25 10:18:06.612206000 +0200
+++ b/third_party/gpus/cuda_configure.bzl	2021-10-25 10:26:20.235584475 +0200
@@ -53,6 +53,7 @@
     "which",
 )
 
+_GCC_HOST_BINUTILS_PREFIX = "GCC_HOST_BINUTILS_PREFIX"
 _GCC_HOST_COMPILER_PATH = "GCC_HOST_COMPILER_PATH"
 _GCC_HOST_COMPILER_PREFIX = "GCC_HOST_COMPILER_PREFIX"
 _CLANG_CUDA_COMPILER_PATH = "CLANG_CUDA_COMPILER_PATH"
@@ -1198,6 +1201,12 @@
 
     cuda_defines["%{host_compiler_prefix}"] = host_compiler_prefix
 
+    host_binutils_prefix = get_host_environ(repository_ctx, _GCC_HOST_BINUTILS_PREFIX)
+    if not host_binutils_prefix:
+        host_binutils_prefix = host_compiler_prefix
+
+    cuda_defines["%{host_binutils_prefix}"] = host_binutils_prefix
+
     # Bazel sets '-B/usr/bin' flag to workaround build errors on RHEL (see
     # https://github.com/bazelbuild/bazel/issues/760).
     # However, this stops our custom clang toolchain from picking the provided
@@ -1209,7 +1218,7 @@
     if should_download_clang:
         cuda_defines["%{linker_bin_path}"] = ""
     else:
-        cuda_defines["%{linker_bin_path}"] = host_compiler_prefix
+        cuda_defines["%{linker_bin_path}"] = host_binutils_prefix
 
     cuda_defines["%{extra_no_canonical_prefixes_flags}"] = ""
     cuda_defines["%{unfiltered_compile_flags}"] = ""
@@ -1418,6 +1427,7 @@
 ]
 
 _ENVIRONS = [
+    _GCC_HOST_BINUTILS_PREFIX,
     _GCC_HOST_COMPILER_PATH,
     _GCC_HOST_COMPILER_PREFIX,
     _CLANG_CUDA_COMPILER_PATH,
